from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import MAIN_DISPATCHER, CONFIG_DISPATCHER, set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.lib.packet import packet, ethernet, ipv4, arp
import random, json, os, time


class QLearningSDNController(app_manager.RyuApp):
    """
    Controller ƒëi·ªÅu khi·ªÉn SDN b·∫±ng Q-Learning cho Case 3.
    H·ªçc ch√≠nh s√°ch ch·ªçn c·ªïng ra (out_port) d·ª±a tr√™n ƒë·ªãa ch·ªâ MAC ngu·ªìn & ƒë√≠ch.
    """
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]

    def __init__(self, *args, **kwargs):
        super(QLearningSDNController, self).__init__(*args, **kwargs)

        # Tham s·ªë Q-learning
        self.q_table = {}  # {(src, dst): {port: q_value}}
        self.learning_rate = 0.5
        self.discount = 0.8
        self.epsilon = 0.3  # x√°c su·∫•t ch·ªçn h√†nh ƒë·ªông ng·∫´u nhi√™n (exploration)

        # C√°c port kh·∫£ d·ª•ng tr√™n switch s1 (t√πy v√†o topo c·ªßa b·∫°n)
        self.actions = [1, 2, 3, 4, 5, 6, 7]

        # ƒê∆∞·ªùng d·∫´n l∆∞u Q-table
        self.save_path = "/home/npt/SDN_Qlearning_Project/analysis/qtable_case3.json"
        os.makedirs(os.path.dirname(self.save_path), exist_ok=True)

        self.last_save_time = time.time()
        self.save_interval = 10  # gi√¢y

        self.logger.info("üöÄ Q-Learning SDN Controller kh·ªüi ƒë·ªông th√†nh c√¥ng!")

    # === H√†m l∆∞u Q-table ra file ===
    def save_qtable(self):
        try:
            # S·ª≠a l·ªói b·∫±ng c√°ch chuy·ªÉn keys (tuple) th√†nh chu·ªói string
            q_table_str = {str(key): value for key, value in self.q_table.items()}
            with open(self.save_path, "w") as f:
                json.dump(q_table_str, f, indent=2)
            self.logger.info(f"üíæ Q-table ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i {self.save_path}")
        except Exception as e:
            self.logger.error(f"[ERROR] Kh√¥ng th·ªÉ l∆∞u Q-table: {e}")

    # === C√†i flow m·∫∑c ƒë·ªãnh: g·ª≠i m·ªçi g√≥i kh√¥ng match l√™n Controller ===
    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_features_handler(self, ev):
        datapath = ev.msg.datapath
        parser = datapath.ofproto_parser
        ofproto = datapath.ofproto

        # Flow m·∫∑c ƒë·ªãnh: g·ª≠i packet_in l√™n controller
        match = parser.OFPMatch()
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,
                                          ofproto.OFPCML_NO_BUFFER)]
        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS, actions)]
        mod = parser.OFPFlowMod(datapath=datapath, priority=0,
                                match=match, instructions=inst)
        datapath.send_msg(mod)
        self.logger.info("‚úÖ ƒê√£ c√†i flow m·∫∑c ƒë·ªãnh g·ª≠i l√™n Controller")

    # === X·ª≠ l√Ω packet_in ===
    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def packet_in_handler(self, ev):
        msg = ev.msg
        datapath = msg.datapath
        parser = datapath.ofproto_parser
        ofproto = datapath.ofproto
        in_port = msg.match['in_port']

        pkt = packet.Packet(msg.data)
        eth = pkt.get_protocols(ethernet.ethernet)[0]

        # === 1Ô∏è‚É£ X·ª≠ l√Ω ARP ri√™ng ===
        if eth.ethertype == 0x0806:  # ARP
            self.logger.debug("üì° G√≥i ARP ƒë∆∞·ª£c flood ƒë·ªÉ h·ªçc MAC")
            actions = [parser.OFPActionOutput(ofproto.OFPP_FLOOD)]
            out = parser.OFPPacketOut(datapath=datapath,
                                      buffer_id=ofproto.OFP_NO_BUFFER,
                                      in_port=in_port,
                                      actions=actions,
                                      data=msg.data)
            datapath.send_msg(out)
            return

        # === 2Ô∏è‚É£ X·ª≠ l√Ω IPv4 packet ===
        ip_pkt = pkt.get_protocol(ipv4.ipv4)
        if ip_pkt is None:
            return

        src, dst = eth.src, eth.dst
        state = (src, dst)

        # Chuy·ªÉn state (src, dst) th√†nh string
        state_str = str(state)

        # Kh·ªüi t·∫°o h√†ng Q-table m·ªõi n·∫øu ch∆∞a c√≥
        if state_str not in self.q_table:
            self.q_table[state_str] = {a: 0 for a in self.actions}

        # Ch·ªçn h√†nh ƒë·ªông (port) theo epsilon-greedy
        if random.random() < self.epsilon:
            action = random.choice(self.actions)
        else:
            action = max(self.q_table[state_str], key=self.q_table[state_str].get)

        # C·∫≠p nh·∫≠t Q-value (m√¥ ph·ªèng reward)
        reward = random.uniform(-1, 1)
        old_value = self.q_table[state_str][action]
        next_max = max(self.q_table[state_str].values())

        new_value = old_value + self.learning_rate * (reward + self.discount * next_max - old_value)
        self.q_table[state_str][action] = round(new_value, 4)

        # === L∆∞u Q-table ƒë·ªãnh k·ª≥ ===
        if time.time() - self.last_save_time > self.save_interval:
            self.save_qtable()
            self.last_save_time = time.time()

        # === 3Ô∏è‚É£ C√†i flow rule cho switch ===
        actions = [parser.OFPActionOutput(action)]
        match = parser.OFPMatch(in_port=in_port, eth_dst=dst)
        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS, actions)]
        mod = parser.OFPFlowMod(datapath=datapath,
                                priority=1,
                                match=match,
                                instructions=inst)
        datapath.send_msg(mod)

        # === 4Ô∏è‚É£ G·ª≠i l·∫°i g√≥i tin hi·ªán t·∫°i ra ƒë√∫ng port ===
        out = parser.OFPPacketOut(datapath=datapath,
                                  buffer_id=msg.buffer_id,
                                  in_port=in_port,
                                  actions=actions,
                                  data=msg.data if msg.buffer_id == ofproto.OFP_NO_BUFFER else None)
        datapath.send_msg(out)

        self.logger.info(f"üì® G√≥i tin {src[:8]}‚Üí{dst[:8]} qua c·ªïng {action}, reward={reward:.2f}")
